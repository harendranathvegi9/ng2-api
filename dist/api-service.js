"use strict";
var http_1 = require('@angular/http');
require('rxjs/add/operator/map');
var api_helpers_1 = require('./api-helpers');
var ApiService = (function () {
    function ApiService(http, path, config) {
        if (config === void 0) { config = {}; }
        this.http = http;
        this.path = path;
        this.config = config;
    }
    ApiService.prototype.serialize = function (model) {
        if (this.config.objectRoot) {
            return JSON.stringify((_a = {}, _a[this.config.objectRoot] = model, _a));
        }
        else {
            return JSON.stringify(model);
        }
        var _a;
    };
    ApiService.prototype.deserialize = function (data) {
        return (this.config.objectRoot ? data[this.config.objectRoot] || data : data);
    };
    ApiService.prototype.extractArray = function (data) {
        return (this.config.arrayRoot ? data[this.config.arrayRoot] : data);
    };
    ApiService.prototype.find = function (id) {
        var _this = this;
        var requestOptions = new http_1.RequestOptions({ body: '' });
        return this.http.get(api_helpers_1.ApiHelpers.interpolate(this.path + "/:id", { id: id }), requestOptions).map(function (res) { return _this.deserialize(res.json()); });
    };
    ApiService.prototype.findAll = function (search) {
        var _this = this;
        var interpolatedPath = api_helpers_1.ApiHelpers.interpolate(this.path, search, true);
        var requestOptions = new http_1.RequestOptions({
            body: '',
            search: api_helpers_1.ApiHelpers.toSearch(search)
        });
        return this.http.get(interpolatedPath, requestOptions).map(function (res) {
            return _this.extractArray(res.json()).map(function (item) {
                return _this.deserialize(item);
            });
        });
    };
    ApiService.prototype.create = function (model) {
        var _this = this;
        return this.http.post(this.path, this.serialize(model))
            .map(function (res) { return _this.deserialize(res.json()); });
    };
    ApiService.prototype.update = function (model) {
        var _this = this;
        return this.http.put(api_helpers_1.ApiHelpers.interpolate(this.path + "/:id", model), this.serialize(model)).map(function (res) { return _this.deserialize(res.json()); });
    };
    ApiService.prototype.delete = function (model) {
        var requestOptions = new http_1.RequestOptions({ body: '' });
        return this.http.delete(api_helpers_1.ApiHelpers.interpolate(this.path + "/:id", model), requestOptions).map(function (res) { return res.ok; });
    };
    return ApiService;
}());
exports.ApiService = ApiService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXBpLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF1QyxlQUFlLENBQUMsQ0FBQTtBQUV2RCxRQUFPLHVCQUF1QixDQUFDLENBQUE7QUFDL0IsNEJBQXlCLGVBQWUsQ0FBQyxDQUFBO0FBR3pDO0lBR0Usb0JBQXNCLElBQWEsRUFDYixJQUFZLEVBQ3RCLE1BQWdCO1FBQWhCLHNCQUFnQixHQUFoQixXQUFnQjtRQUZOLFNBQUksR0FBSixJQUFJLENBQVM7UUFDYixTQUFJLEdBQUosSUFBSSxDQUFRO1FBRWhDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCw4QkFBUyxHQUFULFVBQVUsS0FBUTtRQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBQyxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUUsS0FBSyxLQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDOztJQUNILENBQUM7SUFFRCxnQ0FBVyxHQUFYLFVBQVksSUFBUztRQUNuQixNQUFNLENBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELGlDQUFZLEdBQVosVUFBYSxJQUFTO1FBQ3BCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJ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QUFELENBQUMsQUF2RUQsSUF1RUM7QUF2RVksa0JBQVUsYUF1RXRCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Jlc3BvbnNlLCBSZXF1ZXN0T3B0aW9uc30gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQge0FwaUhlbHBlcnN9IGZyb20gJy4vYXBpLWhlbHBlcnMnO1xuaW1wb3J0IHtBcGlIdHRwfSBmcm9tICcuL2FwaS1odHRwJztcblxuZXhwb3J0IGNsYXNzIEFwaVNlcnZpY2U8VD4ge1xuICBjb25maWc6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogQXBpSHR0cCxcbiAgICAgICAgICAgICAgcHJvdGVjdGVkIHBhdGg6IHN0cmluZyxcbiAgICAgICAgICAgICAgY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgc2VyaWFsaXplKG1vZGVsOiBUKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5jb25maWcub2JqZWN0Um9vdCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtbdGhpcy5jb25maWcub2JqZWN0Um9vdF06IG1vZGVsfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtb2RlbCk7XG4gICAgfVxuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YTogYW55KTogVCB7XG4gICAgcmV0dXJuIDxUPih0aGlzLmNvbmZpZy5vYmplY3RSb290ID8gZGF0YVt0aGlzLmNvbmZpZy5vYmplY3RSb290XXx8ZGF0YSA6IGRhdGEpO1xuICB9XG5cbiAgZXh0cmFjdEFycmF5KGRhdGE6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuICh0aGlzLmNvbmZpZy5hcnJheVJvb3QgPyBkYXRhW3RoaXMuY29uZmlnLmFycmF5Um9vdF0gOiBkYXRhKTtcbiAgfVxuXG4gIGZpbmQoaWQ6IG51bWJlcnxzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBsZXQgcmVxdWVzdE9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoe2JvZHk6ICcnfSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChcbiAgICAgIEFwaUhlbHBlcnMuaW50ZXJwb2xhdGUoYCR7dGhpcy5wYXRofS86aWRgLCB7aWR9KSxcbiAgICAgIHJlcXVlc3RPcHRpb25zXG4gICAgKS5tYXAoKHJlczogUmVzcG9uc2UpID0+IHRoaXMuZGVzZXJpYWxpemUocmVzLmpzb24oKSkpO1xuICB9XG5cbiAgZmluZEFsbChzZWFyY2g/OiBhbnkpOiBPYnNlcnZhYmxlPFRbXT4ge1xuICAgIGxldCBpbnRlcnBvbGF0ZWRQYXRoID0gQXBpSGVscGVycy5pbnRlcnBvbGF0ZSh0aGlzLnBhdGgsIHNlYXJjaCwgdHJ1ZSk7XG4gICAgbGV0IHJlcXVlc3RPcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHtcbiAgICAgIGJvZHk6ICcnLFxuICAgICAgc2VhcmNoOiBBcGlIZWxwZXJzLnRvU2VhcmNoKHNlYXJjaClcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KFxuICAgICAgaW50ZXJwb2xhdGVkUGF0aCxcbiAgICAgIHJlcXVlc3RPcHRpb25zXG4gICAgKS5tYXAoKHJlczogUmVzcG9uc2UpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RBcnJheShyZXMuanNvbigpKS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNlcmlhbGl6ZShpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlKG1vZGVsOiBUKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMucGF0aCwgdGhpcy5zZXJpYWxpemUobW9kZWwpKVxuICAgICAgLm1hcCgocmVzOiBSZXNwb25zZSkgPT4gdGhpcy5kZXNlcmlhbGl6ZShyZXMuanNvbigpKSk7XG4gIH1cblxuICB1cGRhdGUobW9kZWw6IFQpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dChcbiAgICAgIEFwaUhlbHBlcnMuaW50ZXJwb2xhdGUoYCR7dGhpcy5wYXRofS86aWRgLCBtb2RlbCksXG4gICAgICB0aGlzLnNlcmlhbGl6ZShtb2RlbClcbiAgICApLm1hcCgocmVzOiBSZXNwb25zZSkgPT4gdGhpcy5kZXNlcmlhbGl6ZShyZXMuanNvbigpKSk7XG4gIH1cblxuICBkZWxldGUobW9kZWw6IFQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBsZXQgcmVxdWVzdE9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoe2JvZHk6ICcnfSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShcbiAgICAgIEFwaUhlbHBlcnMuaW50ZXJwb2xhdGUoYCR7dGhpcy5wYXRofS86aWRgLCBtb2RlbCksXG4gICAgICByZXF1ZXN0T3B0aW9uc1xuICAgICkubWFwKChyZXM6IFJlc3BvbnNlKSA9PiByZXMub2spO1xuICB9XG59XG4iXX0=